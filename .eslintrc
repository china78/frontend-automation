// 该配置项主要用于指示此.eslintrc文件是 Eslint 在项目内使用的根级别文件，并且 Eslint 不应该在该目录之外搜索配置文件
{
  "root": true,
  // 默认情况下 Eslint 使用其内置的 Espree解析器，该解析器与标准 Javascript 运行时和版本兼容
  // 而我们需要将 ts 代码解析为 eslint 兼容的AST，所以此处我们使用 @typescript-eslint/parser
  "parser": "@typescript-eslint/parser",
  // 该配置项告诉 eslint 我们拓展了哪些配置级
  // eslint:recommended: 该配置集是 eslint 内置的推荐，它打开一组小的、合理的规则，用于检查众所周知的最佳实践
  // @typescript-eslint/recommended: 该配置集是 typescript-eslint 的推荐，它与 eslint:recommended 相似，但它启用了特定于ts的规则
  // @typescript-eslint/eslint-recommended: 该配置集禁用 eslint:recommended 中已经由 typescript 处理的规则
  // 防止eslint 和 typescript 之间有冲突
  // prettier（即eslint-config-prettier）关闭所有可能干扰 Prettier 规则的 ESLint 规则，确保将其放在最后，这样它有机会覆盖其他配置集
  "extends": [
    "eslint:recommended",
    "plugin:@typescript-eslint/recommended",
    "plugin:@typescript-eslint/eslint-recommended",
    "prettier"
  ],
  // 该配置项指示要加载的插件
  // @typescript-eslint 可以让我们在长储存库中使用 typescript-eslint包 定义的规则集
  // prettier插件（即eslint-plugin-prettier）将 Prettier 规则转换为 ESLint 规则
  "plugins": ["@typescript-eslint", "prettier"],
  "env": {
    "browser": true,
    "node": true
  },
  "rules": {
    "@typescript-eslint/no-var-requires": 0,
    "prettier/prettier": "error", // 打开prettier插件提供的规则，该插件从 ESLint 内运行 Prettier

    // 关闭这两个 ESLint 核心规则，这两个规则和prettier插件一起使用会出现问题，具体可参阅
    // https://github.com/prettier/eslint-plugin-prettier/blob/master/README.md#arrow-body-style-and-prefer-arrow-callback-issue
    "arrow-body-style": "off",
    "prefer-arrow-callback": "off",
    "@typescript-eslint/no-explicit-any": "off"
  }
}
